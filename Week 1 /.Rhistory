ggplot(data = ads, aes( x= TV, y = sales))  +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm_sales_TV <- lm(ads$sales ~ ads$TV)
View(lm_sales_TV)
lm_sales_TV <- lm(sales ~ TV, data = ads)
lm_sales_TV <- lm(ads$sales ~ ads$TV)
lm_sales_TV <- lm(sales ~ TV, data = ads)
lm_sales_TV <- lm(ads$sales ~ ads$TV)
summary(lm_sales_TV)
summary(lm_sales_TV)
screenreg(lm_sales_TV)
library(texreg)
library(texreg)
#Code: using screenreg
screenreg(lm_sales_TV)
screenreg(lm_sales_TV)
screenreg(lm_sales_TV)
screenreg(lm_sales_TV)
screenreg(lm_sales_TV)
screenreg(lm_sales_TV)
library(stargazer)
stargazer(lm_sales_TV, type = "latex", title = "Table 1")
confint(lm_sales_TV, level = 0.9)
confint(lm_sales_TV, level = 0.9)
model.matrix(lm_sales_TV)
cor(ads$sales, c(ads$TV,ads$radio,ads$newspaper))
cor(ads$sales,ads$TV)
cor(ads$sales,ads$radio)
cor(ads$sales,ads$newspaper)
_sales_vs_radio_ <- lm(ads$sales ~ ads$radio)
lm_sales_radio <- lm(ads$sales ~ ads$radio)
lm_sales_TV <- lm(ads$sales ~ ads$TV)
lm_sales_TV <- lm(ads$sales ~ ads$TV)
summary(lm_sales_radio)
summary(lm_sales_newspaper)
lm_sales_radio <- lm(ads$sales ~ ads$radio)
lm_sales_newspaper <- lm(ads$sales ~ ads$newspaper)
summary(lm_sales_radio)
summary(lm_sales_newspaper)
(ads)
cor(ads)
cor(ads)
cor(ads[-1])
summary(lm(sales~radio, data = ads))
summary(lm(sales~radio, data = ads))
summary(lm(sales~newspaper, data = ads))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(ads$sales ~ ads$radio))
summary(lm(sales~radio, data = ads))
summary(lm(sales~newspaper, data = ads))
summary(lm(ads$sales ~ ads$radio))
summary(lm(sales~newspaper, data = ads))
summary(lm(sales~newspaper, data = ads))
summary(lm(sales~newspaper, data = ads))
summary(lm(sales~newspaper, data = ads))
print("hello")
summary(lm(sales~radio, data = ads))
cor(ads)
summary(lm(sales~TV, data = ads))
summary(lm(sales~newspaper, data = ads))
lm_sales_radio <- lm(ads$sales ~ ads$radio)
summary(lm(ads$sales ~ ads$radio))
summary(lm_sales_newspaper)
summary(lm_sales_newspaper)
summary(lm_sales_newspaper)
summary(lm_sales_newspaper)
lm_sales_radio <- lm(ads$sales ~ ads$radio)
lm_sales_newspaper <- lm(ads$sales ~ ads$newspaper)
summary(lm_sales_radio)
summary(lm_sales_newspaper)
cor(ads$sales,ads$TV)
cor(ads$sales,ads$radio)
cor(ads$sales,ads$newspaper)
lm_sales_radio <- lm(ads$sales ~ ads$radio)
lm_sales_newspaper <- lm(ads$sales ~ ads$newspaper)
lm_sales_radio <- lm(ads$sales ~ ads$radio)
lm_sales_newspaper <- lm(ads$sales ~ ads$newspaper)
summary(lm_sales_radio)
summary(lm_sales_newspaper)
summary(lm(sales~radio, data = ads))
summary(lm(sales~newspaper, data = ads))
head(ads)
lm1 <- lm(sales ~ TV + newspaper + radio, data = ads)
summary(lm1)
lm1 <- lm(sales ~ TV + newspaper + radio, data = ads)
lm1 <- lm(sales ~ TV + newspaper + radio, data = ads)
head(lm1)
lm1 <- lm(sales ~ TV + newspaper + radio, data = ads)
summary(lm1)
lm2 <- lm(sales ~ ., data = ads)
summary(lm2)
screenreg(lm_sales_TV)
a[1]      # index
a <- c(0,3,-2,-1) # numeric vector
a2 <- 1:3   #integer sequence vector
b <- c("How", "are", "you") # character (char) vector
#Accessing elements using indexing and slicing
#Vector
a[1]      # index
a[2:4]    #slicing
a[c(1,3)] # accessing more than 1 element, not consecutive
a[2]-a[1]
a[2:4]-a[1:3]
sum(a^2)
mean(a)
sprintf("The mean of components of vector a is %f", mean(a)) # %f is a placeholder for numbers For the options see documentation
A <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=3,ncol=4,byrow=TRUE) #shorter to use 1:12
A
dim(A)
?sprintf
?matrix
A[1,2]
A[1:2,]
[1:2,1:2]
A[1:2,1:2]
sprintf("The sum of squares is %f", (sum(v^2)
sprintf("The sum of squares is %f", (sum(v^2))
sprintf("The sum of squares is %f", sum(v^2))
v <- c(1,2,3)
sprintf("The sum of squares is %f", sum(v^2))
sprintf("The sum of squares is %f", (sum(v^2))
sprintf("The sum of squares is %f", (sum(v)^2))
v <- c(1,2,3)
sprintf("The sum of squares is %f", sum(v^2))
sprintf("The sum of squares is %f", (sum(v)^2))
v <- c(100,20,5,1)
v[1:3]/v[2:4]
answer <- c(5,4,5)
r u n i f ( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
runif( n=1,min=0,max=10)
indices
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
fit_full <- lm(Y~ X - 1 )
# Step 3: Fit OLS for full sample
fit_full <- lm(Y~ X - 1 )
# Step 1: Simulate data
n <- 100 # sample size
p <- 3 # number of covariates
K <- 4  # Number of subsamples
# Covariate matrix X (n x p) with entries from N(0, 1)
X <- matrix(rnorm(n*p), nrow = 100, ncol = 3)
# True coefficient vector beta
beta_true <- c(2, -1, 3)
# Generate the error term ~ N(0,1)
epsilon <-rnorm(n)
# Response vector Y = X * beta + epsilon
Y <- X %*%beta + epsilon
# Step 1: Simulate data
n <- 100 # sample size
p <- 3 # number of covariates
K <- 4  # Number of subsamples
# Covariate matrix X (n x p) with entries from N(0, 1)
X <- matrix(rnorm(n*p), nrow = 100, ncol = 3)
# True coefficient vector beta
beta_true <- c(2, -1, 3)
# Generate the error term ~ N(0,1)
epsilon <-rnorm(n)
# Response vector Y = X * beta + epsilon
Y <- X %*%beta + epsilon
# Covariate matrix X (n x p) with entries from N(0, 1)
X <- matrix(rnorm(n*p), nrow = 100, ncol = 3)
# True coefficient vector beta
beta_true <- c(2, -1, 3)
# Generate the error term ~ N(0,1)
epsilon <-rnorm(n)
# Response vector Y = X * beta + epsilon
Y <- X %*%beta_true + epsilon
n_k <- floor(n/K) #Number of observations per subsample
indices <- sample(rep(1:K, each c=n_k)
indices <- sample(rep(1:K, each = n_k)
fit_full <- lm(Y~ X - 1 )
fit_full <- lm(Y~ X - 1 )
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
beta_sampes <- lapply(1:K, function(k)) {
beta_samples <- lapply(1:K, function(k)) {
beta_samples <- lapply(1:K, function(k)) {
beta_samples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
})
indices <- sample(rep(1:K, each = n_k)
fit_full <- lm(Y~ X - 1 )
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
beta_samples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
})
beta_samples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
})
# Fit OLS for each subsample
beta_samples <- lapply(1:K, function(indices) {
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
})
beta_samples <- lapply(1:K, function(k)) {
beta_samples <- lapply(1:K, function(k) {
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
beta_subsamples <- lapply(1:K, function(k) {
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
}
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
beta_subsamples <- lapply(1:K, function(k) {
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat
cat("print")
cat("print","ji")
cat("Is hat beta equal to Gamma %*% tilde_beta?", all.equal(hat_beta, hat_beta_computed, tolerance = 1e-8) , "\n")
print(beta_full)
print(beta_full)
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat("Full sample OLS coefficient (beat_full:\n")
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
print(beta_full)
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
cat("Subsample", k, "OLS coefficients (beta{(k)}):\n",  beta_subsamples[[k]], "\n")
beta_subsamples <- lapply(1:K, function(k) {
cat("Subsample", k, "OLS coefficients (beta{(k)}):\n",  beta_subsamples[[k]], "\n")
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
for (k in 1:K){
cat(paste("Subsample", k, "OLS coefficients (beta{(k)}):\n",  beta_subsamples[[k]], "\n"))
}
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat("Full sample OLS coefficient (beat_full):\n", beta_full, "\n")
for (k in 1:K){
cat(paste("Subsample", k, "OLS coefficients (beta{(k)}):\n",
beta_subsamples[[k]], "\n"))
}
beta_subsamples <- lapply(1:K, function(k) {
beta_subsamples <- lapply(1:K, function(k) {
Y_k <- Y[which(indices == k)]
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
}
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
beta_subsamples
beta_subsamples <- lapply(1:K, function(k) {
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k),]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k -1 ))
} )
beta_subsmaples
beta_subsamples
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k), ]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
bde
beta_subsamples
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k), ]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
# Print the results
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
```
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k), ]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k), ]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
for (k in 1:K) {
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
}
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
Use R's `lm()` function to fit an OLS regression model of \( Y \) on \( X \) (without an intercept term). This will give us the coefficient estimates \( \hat{\beta} \), the fitted values \( \hat{Y} \), and the residuals \( \hat{\varepsilon} \).
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
set.seed(1)
# Step 1: Simulate data
n <- 100 # sample size
p <- 3 # number of covariates
K <- 4  # Number of subsamples
# Covariate matrix X (n x p) with entries from N(0, 1)
X <- matrix(rnorm(n*p), nrow = 100, ncol = 3)
# True coefficient vector beta
beta_true <- c(2, -1, 3)
# Generate the error term ~ N(0,1)
epsilon <-rnorm(n)
# Response vector Y = X * beta + epsilon
Y <- X %*%beta_true + epsilon
# Step 2: Partition the data into K subsamples
n_k <- floor(n/K) #Number of observations per subsample
indices <- sample(rep(1:K, each = n_k)
fit_full <- lm(Y~ X - 1 )
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
indices <- sample(rep(1:K, each = n_k)
indices <- sample(rep(1:K, each = n_k)
indices <- sample(rep(1:K, each = n_k))
fit_full <- lm(Y~ X - 1 )
beta_full <-coef(fit_full)
beta_subsamples <- lapply(1:K, function(k) {
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
})
X_k <- X[which(indices == k)]
Y_k <- Y[which(indices == k)]
coef_k <- coef(lm(Y_k ~ X_k - 1))
cat("Full sample OLS coefficients (beta_full):\n",beta_full, "\n")
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
cat(paste("Subsample", k, "OLS coefficients (beta_{(k)}):\n"),
beta_subsamples[[k]], "\n")
rm(list = ls()) # clear all
rm(list = ls())
rm(list = ls())
r
rm(list = ls())
# setting the work directory
setwd("/Users/tarunrajan/Library/Mobile Documents/com~apple~CloudDocs/FM321/Week 1 ")
2^5
a=2
b=100
result=exp(a)+b
exp(a)+b/10
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:",log(a),"or",result,"\n")
cat("the answer is:", log(a), "or", result, "\n")
C <- matrix(c(4, 4, 5, 7, 34, 2), nrow = 2, byrow = TRUE)
C
c_1c<- C[1,]  # displays the first row
c_1c
c_r1<- C[,1]  # displays the first column
c_r1
c_21<- C[2,1] # displays the 2,1 element
c_21
C_t <- t(C)  # transpose of C
C_t
C_t
C
c_1c<- C[1,]  # displays the first row
c_1c
c_r1<- C[,1]  # displays the first column
c_r1
c_21<- C[2,1] # displays the 2,1 element
c_21
C_t <- t(C)  # transpose of C
C_t
W
W
W
W
H <- matrix(0, nrow = 3, ncol = 4)# 3 x 4 matrix of zeros
H
I <- diag(5) # Creates a 5x5 identity matrix
I
W <- matrix(1, nrow = 3, ncol = 1) # creates a 3 x 1 vector of ones
W
W
H <- matrix(0, nrow = 3, ncol = 4)# 3 x 4 matrix of zeros
H
I <- diag(5) # Creates a 5x5 identity matrix
I
W <- matrix(1, nrow = 3, ncol = 1) # creates a 3 x 1 vector of ones
W
B_inv
B_inv <- solve(B) # inverse of matrix B
B_inv
B_inv <- solve(B) # inverse of matrix B
B_inv
D<-B%*%C
D
V = B%*%B_inv
B <- matrix(c(3, 4, 5, 8), nrow = 2, byrow = TRUE)  # The byrow argument specifies how the matrix should be filled with the provided data.
B_inv <- solve(B) # inverse of matrix B
B_inv
unique(data$PERMNO)   # returns the unique values in the PERMNO column of the data frame data. The unique function is used to find distinct values in a column.
data <- read.csv('crsp_seminar1.csv') # reads a CSV file named 'crsp.csv' into a data frame called 'data'. The 'read.csv' function is used to import data from a CSV file.
data <- read.csv('crsp_seminar1.csv') # reads a CSV file named 'crsp.csv' into a data frame called 'data'. The 'read.csv' function is used to import data from a CSV file.
dev.new() # new figure
plot(citi$PRC, type = "l", main = "Price of Citi")
# Used to open a new graphics device for creating plots
dev.new()
plot(citi$PRC, type = "l", main = "Price of Citi")
citi <- data[data$PERMNO == 70519,]
# or alternatively ....
citi_df <- as.data.frame(data[data$PERMNO == 70519,])
plot(citi$PRC, type = "l", main = "Price of Citi")
citi <- data[data$PERMNO == 70519,]
## ---------- Example if and loop ----------------
## Generate prices: random walk model
T<-2000
p <- matrix(nrow = T, ncol = 1)
r <- matrix(nrow = T-1, ncol = 1)
eps <- rnorm(n = T)
p <- matrix(nrow = T, ncol = 1)
r <- matrix(nrow = T-1, ncol = 1)
eps <- rnorm(n = T)
p <- matrix(nrow = T, ncol = 1)
r <- matrix(nrow = T-1, ncol = 1)
## ---------- Example if and loop ----------------
## Generate prices: random walk model
T<-2000
p <- matrix(nrow = T, ncol = 1)
